import re
from src.data_store import data_store
from src.error import InputError

def auth_login_v1(email, password):
    # Get data of users dict from data_store
    store = data_store.get()
    users = store["users"]

    # Check if email and password combination is registered in users dict
    # return_id set to -1 by default (indicating user cannot login)
    # return_id changed to u_id in database if user + password combo is found
    return_id = -1
    for u_id, user in users.items():
        if user["email"] == email and user["password"] == password:
            return_id = u_id

    # Raise input error if user cannot be logged in
    if return_id == -1:
        raise InputError("Email or Password is invalid")

    return {
        'auth_user_id': return_id,
    }

# Check if handle is already taken by another user
def is_taken(users, handle):
    for user in users.values():
        if user["handle_str"] == handle:
            return True
    return False

def auth_register_v1(email, password, name_first, name_last):
    
    # Get data of users dict from data_store
    store = data_store.get()
    users = store["users"]

    # Perform series of checks to make sure registration can be authorised
    # - Email entered is not a valid email
    if re.fullmatch(R'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$', email) == None:
        raise InputError("Invalid email format")

    # - Email address is already being used by another user
    for user in users.values():
        if user["email"] == email:
            raise InputError("Email already taken")
    
    # - Length of password is less than 6 characters
    if len(password) < 6:
        raise InputError("Password must be at least 6 characters")

    # - Length of name_first is not between 1 and 50 characters inclusive
    if not 1 <= len(name_first) <= 50:
        raise InputError("First name must be between 1 and 50 characters long")
    
    # - Length of last_name is not between 1 and 50 characters inclusive
    if not 1 <= len(name_last) <= 50:
        raise InputError("Last name must be between 1 and 50 characters long")

    # Generate handle using first and last name
    # - initial handle generated from concatenation of lowercase-only alphanumeric first name and last name
    # - cut down to 20 characters
    handle = ""
    for character in name_first + name_last:
        if character.isalnum():
            handle += character.lower()
    handle = handle[:20]

    # If handle is taken, add smallest integer after current handle
    if is_taken(users, handle):
        duplicate_number = 0
        while is_taken(users, handle + str(duplicate_number)):
            duplicate_number += 1
        handle = handle + str(duplicate_number)

    # u_id generated by length of users
    u_id = len(users)

    # Append dict for new user containing user info
    users[u_id] = {
        "email": email, 
        "name_first": name_first,
        "name_last": name_last,
        "password": password,
        "handle_str": handle
    }

    # Set data containing user information
    store["users"] = users
    data_store.set(store)

    return {
        'auth_user_id': u_id,
    }
